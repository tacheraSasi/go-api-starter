version: "3.8"

services:
  # Main API service
  api:
    build:
      context: .
      target: final
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=release
      - DB_TYPE=postgres
      - DB_PATH=postgres://postgres:password@db:5432/go_api_starter?sslmode=disable
      - JWT_SECRET=your-super-secret-jwt-key-change-this
      - JWT_EXPIRY_HOURS=24
      - LOG_FILE_PATH=/app/logs/app.log
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=go_api_starter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
# Development override
# Use: docker-compose -f compose.yaml -f compose.dev.yaml up
# For development with hot reload and additional tools

